name: AvarikCI Build ðŸŽ®

on:
  workflow_dispatch:

env:
  PROJECT_ID: agones-test-385708
  IMAGE_REPOSITORY: server_test_rifai
  OUTPUT_PATH: buildserver
  ADMIN_PANEL_URL: https://firgefun.io/example_adminpanel_for_githubactoin

jobs:
  buildLinuxGameServer:
    name: Build for Linux Server
    runs-on: ubuntu-latest
    container:
      image: unityci/editor:ubuntu-2021.3.11f1-linux-il2cpp-1.1.2
      options: --user 0
    steps:

      - name: Install Git
        run: |
          apt-get update
          apt-get install -y git

      - name: Git Version
        run: |
          git --version





      - name: Checkout code
        uses: actions/checkout@v2
        with:
          lfs: true

      - name: Build Unity Dedicated Server
        run: |
          /opt/unity/Editor/Unity \
            -quit \
            -batchmode \
            -nographics \
            -projectPath $(pwd) \
            -executeMethod BatchBuild.BuildServer \
            -serial "${{ secrets.UNITY_SERIAL }}" \
            -username "${{ secrets.UNITY_EMAIL }}" \
            -password "${{ secrets.UNITY_PASSWORD }}" \
            -silent-crashes

      - name: Set Tag Container
        id: tag_image
        run: echo "::set-output name=tag::${GITHUB_REF#refs/heads/}-$(date +'%Y%m%d%H%M%S')"

      - name: Set Docker Image
        id: docker_image
        run: echo "::set-output name=image_url::gcr.io/${{ env.PROJECT_ID }}/${{ env.IMAGE_REPOSITORY }}:${{ steps.tag_image.outputs.tag }}"

      - name: 'Authenticate to Google Cloud'
        id: 'auth'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'
          
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1.1.1
        with:
          project_id: ${{ env.PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          
      - name: 'Use gcloud to upload docker'
        run: 'gcloud builds submit --tag ${{ steps.docker_image.outputs.image_url }}'

      # - name: 'Run Agones Apply Fleet'
      #   run: |
      #     curl --location 'http://34.128.95.5:30101/agones/fleet' \
      #     --header 'Content-Type: application/json' \
      #     --data '{"container": "${{ steps.docker_image.outputs.image_url }}"}'

      - name: Send Discord Notification
        run: |
          DISCORD_MESSAGE="TEST BUILD SERVER CHECK CONTIDION IS AGONES_SERVER!!!!!!!!!!!\n\nServer with version ${{ steps.tag_image.outputs.tag }} is available now! :tada:\n\nopen ${{ env.ADMIN_PANEL_URL }} to set build"

          curl -X POST -H "Content-Type: application/json" -d "{\"content\": \"$DISCORD_MESSAGE\"}" ${{ secrets.DISCORD_WEBHOOK_URL }}
